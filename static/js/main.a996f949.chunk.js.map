{"version":3,"sources":["component/Navbar.js","component/Textutils.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","onClick","lightSwitch","id","blueSwitch","darkSwitch","pinkSwitch","Textutils","useState","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","split","filter","element","length","Alert","App","setMode","document","body","style","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sRAGe,SAASA,EAAOC,GAC3B,OACI,sBAAKC,UAAS,iBAAYD,EAAME,MAAhC,UACI,qBAAID,UAAU,cAAd,UACI,sCACA,uCACA,4CACA,yCAEJ,sBAAKA,UAAU,iBAAf,UACA,wBAAQE,QAASH,EAAMI,YAAaC,GAAG,OAAvC,uBACA,wBAAQF,QAASH,EAAMM,WAAaD,GAAG,OAAvC,sBACA,wBAAQF,QAASH,EAAMO,WAAYF,GAAG,OAAtC,sBACA,wBAAQF,QAASH,EAAMQ,WAAYH,GAAG,OAAtC,4B,MCZG,SAASI,EAAUT,GAC9B,IAiBA,EAAwBU,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAIA,OACI,sBAAKX,UAAS,6BAAwBD,EAAME,MAA5C,UACI,6BAAMF,EAAMa,UACZ,0BAAUC,MAAOH,EAAMI,SAXf,SAACC,GACbJ,EAAQI,EAAMC,OAAOH,QAU2Bb,UAAS,mBAAcD,EAAME,MAAQG,GAAG,WAAUa,KAAK,OACnG,sBAAKjB,UAAU,SAAf,UACI,wBAAQA,UAAU,cAAcE,QA1BxB,WAChB,IAAIgB,EAAQR,EAAKS,cACjBR,EAAQO,IAwBA,kCACA,wBAAQlB,UAAU,cAAcE,QAtBxB,WAChB,IAAIgB,EAAQR,EAAKU,cACjBT,EAAQO,IAoBA,kCACA,wBAAQlB,UAAU,cAAcE,QAnB5B,WAEZS,EADY,KAkBJ,2BAEJ,sBAAKX,UAAU,YAAf,UACA,kDACA,8BAAIU,EAAKW,MAAM,KAAKC,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQC,UAAaA,OAAnE,aAAqFd,EAAKc,OAA1F,iBACA,8BAAId,EAAKW,MAAM,KAAKC,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQC,UAAaA,OAAnE,wBACA,yCACA,4BAAId,U,MCrCD,SAASe,EAAM1B,GAE1B,OACA,qBAAKC,UAAU,QAAf,SACE,uDCuES0B,MAxEf,WACE,MAAwBjB,mBAAS,SAAjC,mBAAOR,EAAP,KAAa0B,EAAb,KA2DA,OACE,qCACA,cAAC,EAAD,CAAQ1B,KAAMA,EAAME,YA9CJ,YACN,SAAPF,GAIY,SAAPA,GAIO,SAAPA,KAPN0B,EAAQ,SACRC,SAASC,KAAKC,MAAMC,WAAW,UA2Ca1B,WAhC7B,YACL,SAAPJ,GAIY,UAAPA,GAIO,SAAPA,KAPN0B,EAAQ,QACRC,SAASC,KAAKC,MAAMC,WAAW,YA6BmCzB,WA5DvD,YACL,UAAPL,GAIY,SAAPA,GAIO,SAAPA,KAPN0B,EAAQ,QACRC,SAASC,KAAKC,MAAMC,WAAW,UAyD6DxB,WAlB7E,YACL,SAAPN,GAIY,UAAPA,GAIO,SAAPA,KAPN0B,EAAQ,QACRC,SAASC,KAAKC,MAAMC,WAAW,gBAgBnC,cAAC,EAAD,IACA,cAAC,EAAD,CAAYnB,QAAQ,6CAA6CX,KAAMA,QC1D5D+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAM1BZ,M","file":"static/js/main.a996f949.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div className={`navbar-${props.mode}`}>\r\n            <ul className=\"navbar-item\">\r\n                <li>HOME</li>\r\n                <li>ABOUT</li>\r\n                <li>REACT INFO</li>\r\n                <li>HELP</li>\r\n            </ul>\r\n            <div className=\"mode-container\">\r\n            <button onClick={props.lightSwitch} id=\"mode\">LIGHTMODE</button>\r\n            <button onClick={props.blueSwitch}  id=\"mode\">BLUEMODE</button>\r\n            <button onClick={props.darkSwitch} id=\"mode\" >DARKMODE</button>\r\n            <button onClick={props.pinkSwitch} id=\"mode\" >PINKMODE</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport './Textutils.css'\r\n\r\nexport default function Textutils(props) {\r\n    const upperCaseText=()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        \r\n    }\r\n    const lowercaseText=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const clearText=()=>{\r\n        let newText=\"\";\r\n        setText(newText);\r\n    }\r\n    const textValue=(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n    \r\n\r\n    return (\r\n        <div className={`textarea-container-${props.mode}`}>\r\n            <h1 >{props.heading}</h1>\r\n            <textarea value={text} onChange={textValue} className={`textarea-${props.mode}`} id=\"textarea\"rows=\"10\"></textarea>\r\n            <div className=\"button\">\r\n                <button className=\"button-item\" onClick={upperCaseText}>Convart To Uppercase</button>\r\n                <button className=\"button-item\" onClick={lowercaseText}>Convart To Lowercase</button>\r\n                <button className=\"button-item\" onClick={clearText}>Clear Text</button>\r\n            </div>\r\n            <div className=\"textsmray\">\r\n            <h2>Your text Samary</h2>\r\n            <p>{text.split(' ').filter((element)=>{return element.length!==0}).length} Word and {text.length} characters</p>\r\n            <p>{text.split(' ').filter((element)=>{return element.length!==0}).length} minutes read time</p>\r\n            <h1>Preview</h1>\r\n            <p>{text}</p>\r\n            </div>\r\n\r\n        </div>\r\n        // style={{backgroundColor:props.mode===\"dark\"?'black':'white',color:props.mode===\"dark\"?'white':'black'}} \r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Alert.css'\r\n\r\nexport default function Alert(props) {\r\n\r\n    return (\r\n    <div className=\"alert\">\r\n      <strong>this is a alert</strong> \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n","import './App.css';\nimport Navbar from './component/Navbar';\nimport Textutils from './component/Textutils';\nimport Alert from './component/Alert';\nimport React, { useState } from 'react'\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const darkSwitch=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.background=\"black\";\n    }\n    else if(mode==='blue'){\n      setMode('dark');\n      document.body.style.background=\"black\";\n    }\n    else if(mode==='pink'){\n      setMode('dark');\n      document.body.style.background=\"black\";\n    }\n  };\n  const lightSwitch=()=>{\n    if(mode==='dark'){\n      setMode('light');\n      document.body.style.background=\"white\";\n    }\n    else if(mode==='blue'){\n      setMode('light');\n      document.body.style.background=\"white\";\n    }\n    else if(mode==='pink'){\n      setMode('light');\n      document.body.style.background=\"white\";\n    }\n  }\n    const blueSwitch=()=>{\n      if(mode==='dark'){\n        setMode('blue');\n        document.body.style.background=\"#040423\";\n      }\n      else if(mode==='light'){\n        setMode('blue');\n        document.body.style.background=\"#040423\";\n      }\n      else if(mode==='pink'){\n        setMode('blue');\n        document.body.style.background=\"#040423\";\n      }\n    }\n    const pinkSwitch=()=>{\n      if(mode==='dark'){\n        setMode('pink');\n        document.body.style.background=\"#ffc7d18c\";\n      }\n      else if(mode==='light'){\n        setMode('pink');\n        document.body.style.background=\"#ffc7d18c\";\n      }\n      else if(mode==='blue'){\n        setMode('pink');\n        document.body.style.background=\"#ffc7d18c\";\n      }\n  }\n\n \n  return (\n    <>\n    <Navbar mode={mode} lightSwitch={lightSwitch} blueSwitch={blueSwitch} darkSwitch={darkSwitch} pinkSwitch={pinkSwitch}/>\n    <Alert/>\n    <Textutils  heading=\"Enten Text Hear Convert Aeny Form You Need\" mode={mode}/>\n\n    </>\n\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}